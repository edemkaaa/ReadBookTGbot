import { Update, Start, Ctx, Command, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { BooksService } from '../books/books.service';
import { Markup } from 'telegraf';

@Update()
export class TelegramUpdate {
  constructor(private readonly booksService: BooksService) {
    console.log('TelegramUpdate initialized'); // –õ–æ–≥ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  @Start()
  async startCommand(@Ctx() ctx: Context) {
    console.log('Start command received'); // –õ–æ–≥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    console.log('Context:', ctx.message); // –õ–æ–≥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const webAppUrl = process.env.NODE_ENV === 'production' 
      ? 'https://–≤–∞—à-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π-–¥–æ–º–µ–Ω' 
      : 'https://localhost:5173'; // –¢—Ä–µ–±—É–µ—Ç—Å—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç

    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF —Ñ–∞–π–ª, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.',
      Markup.keyboard([
        ['üìö –ú–æ–∏ –∫–Ω–∏–≥–∏'], 
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ]).resize()
    );
  }

  @Command('books')
  async onBooks(ctx: Context) {
    await ctx.reply('–í–∞—à–∏ –∫–Ω–∏–≥–∏:');
  }

  @On('document')
  async onDocument(@Ctx() ctx: Context) {
    if (!ctx.message) return;
    
    if ('document' in ctx.message) {
      const { file_id } = ctx.message.document;
      const userId = ctx.message.from.id.toString();

      try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        const file = await ctx.telegram.getFile(file_id);
        const response = await fetch(`https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`);
        const buffer = await response.arrayBuffer();

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è BooksService
        const bookFile = {
          originalname: ctx.message.document.file_name || 'book.pdf',
          buffer: Buffer.from(buffer),
          mimetype: 'application/pdf'
        };

        await this.booksService.uploadBook(bookFile as Express.Multer.File, userId);
        
        await ctx.reply('–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –µ—ë –≤ —á–∏—Ç–∞–ª–∫–µ.');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }

  @On('text')
  async onText(@Ctx() ctx: Context) {
    if (!ctx.message || !('text' in ctx.message)) return;

    const text = ctx.message.text;
    const userId = ctx.message.from.id.toString();

    if (text === 'üìö –ú–æ–∏ –∫–Ω–∏–≥–∏') {
      try {
        const books = await this.booksService.getUserBooks(userId);
        
        if (books.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–Ω–∏–≥.');
          return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const uniqueBooks = books.reduce((acc, book) => {
          const title = book.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
          // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏
          if (!acc[title] || new Date(acc[title].createdAt) < new Date(book.createdAt)) {
            acc[title] = book;
          }
          return acc;
        }, {} as Record<string, any>);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ä—É—Å—Å–∫–æ–º —Å—Ç–∏–ª–µ
        const formatDate = (date: Date) => {
          return new Date(date).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
          });
        };

        const bookList = Object.values(uniqueBooks)
          .map(book => 
            `üìñ ${book.title.replace('.pdf', '')}\n` +
            `üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: ${formatDate(book.createdAt)}\n` +
            `üîó ${process.env.WEBAPP_URL}/reader/${book.id}`
          )
          .join('\n\n');

        await ctx.reply(`üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:\n\n${bookList}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥.');
      }
    }
  }

  private generateBookLink(bookId: string): string {
    if (process.env.NODE_ENV === 'production') {
      return `https://–≤–∞—à-–¥–æ–º–µ–Ω/reader/${bookId}`;
    } else {
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok
      return `${process.env.WEBAPP_URL}/reader/${bookId}`;
    }
  }
} 